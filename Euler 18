 /*
http://projecteuler.net/problem=18
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
--
There are some funny last minute changes in the code to make it work. It could be more elegent. Also you have to scan the last line output on the terminal yourself to find the max.
*/

#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>

using namespace std;

int max(int i,int j){
  if(i>j)
		return i;
	else
		return j;
	return 0;
}

int main(){
	int size = 15;
	int values[size][size+1];
	int cost[size][size+1];
	istringstream stream;
	
	for(int i = 0; i < size;i++)
		for(int j = 0; j < size+1; j++){
			cost[i][j] = 0;
			values[i][j] = 0;
		}
		
	string tmp;
	int temp;
	for(int i = 0; i < 15; i++){
		getline(cin,tmp);
		stream.clear();
		stream.str(tmp);
		for(int j = 0; j <= i; j++)
			stream >> values[i][j];
	
	}
	
	for(int i = 0; i < size;i++){
		for(int j = 0; j < size+1; j++){
			cout.width(3);
			cout << values[i][j] << " ";
		}
		cout << endl;
	}
	cost[0][1] = values[0][0];
	for(int i = 1; i < size;i++)
		for(int j = 1; j < size; j++)
			cost[i][j] = values[i][j]+max(cost[i-1][j],cost[i-1][j-1]);
	
	cout << endl;
	for(int i = 0; i < size;i++){
		
		for(int j = 0; j < size+1; j++){
			cout.width(3);
			cout << cost[i][j] << " ";
		}
		cout << endl;
	}
	
	return 0;
}

