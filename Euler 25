 /*
http://projecteuler.net/problem=25
The Fibonacci sequence is defined by the recurrence relation:

Fn = Fn1 + Fn2, where F1 = 1 and F2 = 1.
Hence the first 12 terms will be:

F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144
The 12th term, F12, is the first term to contain three digits.

What is the first term in the Fibonacci sequence to contain 1000 digits?
*/

#include <iostream>

using namespace std;

//destructive add
void addBigNum(int size, int one[], int two[]){
  for(int i = 0; i < size; i++){
		one[i] = one[i] + two[i];
		if(one[i] > 9){
			one[i] = one[i] - 10;
			one[i+1]++;
		}
	}

}

void print(int size, int num[]){
	for(int i = 0; i < size; i++)
		cout << num[i] << ",";
	cout << endl;
}

void copy(int size, int one[], int two[]){
	for(int i = 0; i < size; i++)
		two[i] = one[i];
}

int main(){
	int size = 1000;
	int one[size];
	int two[size];
	int three[size];
	int term = 2;
	
	for(int i = 0; i < 1000; i++){
		one[i] = 0;
		two[i] = 0;
		three[i] = 0;
	}
	one[0] = 1; 
	two[0] = 1;
	while(one[size-1] == 0){
		term++;
		copy(size,one,three);
		addBigNum(size,one,two);
		copy(size,three,two);
	}
	
	print(size,one);	
	cout << "Term #: " << term << endl;
	
	return 0;
}
