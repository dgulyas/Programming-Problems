 /*
10004 - Bicoloring
http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=945
*/

#include <iostream>
#include <queue>


using namespace std;

int * color;

void bfs(int ** graph, int start, int nodes, int * parent){
  queue<int> qu;
	int currentNode;
	int i;
	bool discovered[nodes];
	
	for(int i = 0; i < nodes; i++)
		discovered[i] = false;
	
	qu.push(start);
	discovered[start] = true;
	color[start] = 1;
	
	while(!qu.empty()){
		currentNode = qu.front();
		qu.pop();

		for(int i = 0; i < nodes; i++)
			if(graph[currentNode][i] == 1)
				if(discovered[i] == false){
					qu.push(i);
					discovered[i] = true;
					color[i] = color[currentNode] * -1;
					parent[i] = currentNode;
				}
	}

}

void addNode(int ** graph, int firstNode, int secondNode){
	//cout << "adding: " << firstNode << " " << secondNode << endl;
	graph[firstNode][secondNode] = 1;
	//cout << "added:  " << firstNode << " " << secondNode << endl;
}

void print(int ** graph,int nodes){
	for(int i = 0; i < nodes; i++)
		cout << i << " ";
	cout << endl;
		
	for(int i = 0; i < nodes; i++){
		for(int j = 0; j < nodes; j++)
			cout << graph[i][j] << " ";
		cout << endl;
	}
}




int main () {
	

	int lines, nodes;
	int ** graph;
	int * parent;
	
	bool bicolorable;
	int firstNode, secondNode;
	
	
	cin >> nodes;

	while(nodes != 0){
		cin >> lines;
		
		bicolorable = true;
		color = new int[nodes];
		for(int i = 0; i < nodes; i++)
			color[i] = -1;
		
		parent = new int[nodes];
		for(int i = 0; i < nodes; i++)
			parent[i] = -1;
		
		graph = new int*[nodes]; //set up graph
		for(int i = 0; i < nodes; i++)
			graph[i] = new int[nodes];
			
		for(int j = 0; j < nodes; j++)
			for(int i = 0; i < nodes; i++)
				graph[i][j] = 0;
		
		for(int i = 0; i < lines; i++){
			cin >> firstNode >> secondNode;
			addNode(graph,firstNode,secondNode);
			addNode(graph,secondNode,firstNode);
		}
		
		bfs(graph,0,nodes,parent);
		
		
		for(int i = 0; i < nodes; i++)
			for(int j = 0; j < nodes; j++)
				if(graph[i][j] == 1)
					if(color[i] == color[j])
						bicolorable = false;
		
		
		/*
		cout << "parent: ";
		for(int i = 0; i < nodes; i++)
			cout << parent[i] << " ";
		cout << endl;
		
		cout << "color : ";
		for(int i = 0; i < nodes; i++)
			cout << color[i] << " ";
		cout << endl;
		
		print(graph,nodes);
		*/
		if(bicolorable)
			cout << "BICOLORABLE.";
		else
			cout << "NOT BICOLORABLE.";
		
		cout << endl;
		
		delete(color);
		delete(parent);
		for(int i = 0; i < nodes; i++)
			delete(graph[i]);
		delete(graph);
		cin >> nodes;
		
	}
    return 0;
}
